// 기본 환경 설정
const express = require("express");
const path = require("path");
const { sequelize, User } = require("./models");
const app = express();
const session = require("express-session");

app.set("port", process.env.PORT || 3001);

// 세션 설정(mypage에 사용)
app.use(
  session({
    secret: "it's time to go home",
    resave: false,
    saveUninitialized: false,
    cookie: { maxAge: 1000 * 60 * 30, httpOnly: true, secure: false },
  })
);

sequelize
  .sync({ force: false })
  .then(() => console.log("Database connected successfully"))
  .catch((err) => console.error("Database connection error:", err));

app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(express.static(path.join(__dirname, "static")));

// 회원가입 페이지
app.post("/join", async (req, res) => {
  const { name, id, email, password } = req.body;
  try {
    const query = `
      INSERT INTO users (name, id, email, password) 
      VALUES ('${name}', '${id}', '${email}', '${password}')
    `;
    await sequelize.query(query);
    console.log("회원가입 완료!");

    // 회원가입 완료 후 main.html로 리디렉트
    res.redirect("/main");
  } catch (error) {
    console.error("Error during registration:", error);
    res.status(500).send("Error during registration");
  }
});

// Name 중복 확인
app.get("/check-name", async (req, res) => {
  const { name } = req.query;
  try {
    const user = await User.findOne({ where: { name } });
    if (user) {
      res.json({ exists: true });
    } else {
      res.json({ exists: false });
    }
  } catch (error) {
    console.error("Error checking name:", error);
    res.status(500).json({ error: "Error checking name" });
  }
});

// 로그인 페이지
app.post("/login", async (req, res) => {
  const { id, password } = req.body;
  try {
    const user = await User.findOne({ where: { id, password } });
    if (user) {
      // 로그인 성공하면 세션에 사용자 ID와 이름을 저장
      req.session.userId = user.id;
      req.session.userName = user.name;
      res.redirect("/mypage");
    } else {
      res.status(401).send("Invalid credentials");
    }
  } catch (error) {
    console.error("Error during login:", error);
    res.status(500).send("Error during login");
  }
});

const bcrypt = require("bcrypt");

// 비밀번호 변경 페이지(보안상 취약함! 해시 함수 사용시 에러가 나서 일단 평문 사용)
app.post("/change-passwd", async (req, res) => {
  const { oldPassword, newPassword } = req.body;

  const userId = req.session.userId;

  // 로그인되지 않은 경우
  if (!userId) {
    return res.status(401).send("로그인이 필요합니다.");
  }

  try {
    const user = await User.findOne({
      where: { id: userId },
    });

    if (!user) {
      return res.status(400).send("사용자를 찾을 수 없습니다.");
    }

    if (oldPassword !== user.password) {
      return res.status(400).send("현재 비밀번호가 일치하지 않습니다.");
    }

    user.password = newPassword;
    await user.save(); // 비밀번호 update

    res.send("비밀번호 변경이 완료되었습니다.");
  } catch (error) {
    console.error("Error changing password:", error);
    res.status(500).send("비밀번호 변경 중 오류가 발생했습니다.");
  }
});

// main 페이지
app.get("/main", (req, res) => {
  res.sendFile(path.join(__dirname, "static/HTML/main.html"));
});
// 로그인 상태 확인
app.get("/check-login", (req, res) => {
  if (req.session.userName) {
    res.json({ loggedIn: true });
  } else {
    res.json({ loggedIn: false });
  }
});

//mypage 페이지
app.get("/mypage", (req, res) => {
  if (!req.session.userName) {
    return res.redirect("/login.html");
  }
  res.send(`
    <!DOCTYPE html>
    <html lang="ko">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>My Page</title>
    </head>
    <body>
      <h1>My Page</h1>
      <p>Welcome, ${req.session.userName}! Have a nice day!</p>
      <button onclick="location.href='/HTML/main.html'">메인 페이지로 돌아가기</button>
    </body>
    </html>
  `);
});

app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "static/HTML/join.html"));
});

app.listen(app.get("port"), () => {
  console.log(`Server running on port ${app.get("port")}`);
});
